group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = yday(Count_Date), presence = first(presence)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
# check to see if date is related to detections
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = yday(Count_Date), presence = first(presence)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial)) +
facet_wrap(facets = surveyYear)
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = yday(Count_Date), presence = first(presence)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
# check to see if date is related to detections
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
reframe(dayOfYear = yday(Count_Date), presence = first(presence)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
# check to see if date is related to detections
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
reframe(dayOfYear = yday(Count_Date), presence = as.factor*(first(presence))) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
# check to see if date is related to detections
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
reframe(dayOfYear = yday(Count_Date), presence = as.factor(first(presence))) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
# check to see if date is related to detections
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
reframe(dayOfYear = yday(Count_Date), presence = first(presence)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = yday(Count_Date), presence = first(presence))
checkt <- surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = yday(Count_Date), presence = first(presence))
View(checkt)
duplicated(checkt$surveyEvent)
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = yday(Count_Date), presence = max(presence)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
checkt <- surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = yday(Count_Date), presence = max(presence))
checkt <- surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = yday(Count_Date), surveyEvent = first(surveyEvent), presence = max(presence))
checkt <- surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = yday(Count_Date), presence = max(presence),.groups = "last")
checkt <- surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = yday(Count_Date), presence = max(presence),.groups = "drop")
checkt <- surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = yday(Count_Date), presence = max(presence),.groups = "keep")
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Wind) %>%
summarise(wind = first(Wind), presence = first(presence)) %>%
ggplot(.,aes(x = wind, y = presence, color = presence)) + geom_point() +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Wind speed") + coord_fixed(ratio = 3) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date)
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = yday(Count_Date)
)
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = first(yday(Count_Date)), presence = first(presence))
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = first(yday(Count_Date)), presence = first(presence)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date) %>%
summarise(dayOfYear = first(yday(Count_Date)), presence = first(presence)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
facet_wrap(facets = surveyYear) +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
# check to see if date is related to detections
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date, surveyYear) %>%
summarise(dayOfYear = first(yday(Count_Date)), presence = first(presence)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
facet_wrap(facets = surveyYear) +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date, surveyYear)
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date, surveyYear)
# check to see if date is related to detections
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date, surveyYear) %>%
summarise(dayOfYear = first(yday(Count_Date)), presence = first(presence), surveyYear = first(surveyYear)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
facet_wrap(facets = surveyYear) +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date, surveyYear) %>%
summarise(dayOfYear = first(yday(Count_Date)), presence = first(presence), surveyYear = first(surveyYear)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
facet_wrap(facets = surveyYear)
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date, surveyYear) %>%
summarise(dayOfYear = first(yday(Count_Date)), presence = first(presence), surveyYear = first(surveyYear))
# check to see if date is related to detections
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date, surveyYear) %>%
summarise(dayOfYear = first(yday(Count_Date)), presence = first(presence), surveyYear = first(surveyYear)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
facet_wrap(facets = surveyYear) +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
# check to see if date is related to detections
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date, surveyYear) %>%
summarise(dayOfYear = first(yday(Count_Date)), presence = first(presence), surveyYear = first(surveyYear)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
facet_wrap(vars(surveyYear)) +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
# check to see if date is related to detections
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date, surveyYear) %>%
summarise(dayOfYear = first(yday(Count_Date)), presence = first(presence), surveyYear = first(surveyYear)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
facet_grid(vars(surveyYear)) +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
# check to see if date is related to detections
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date, surveyYear) %>%
summarise(dayOfYear = first(yday(Count_Date)), presence = first(presence)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
facet_grid(vars(surveyYear)) +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
#| echo: false
#| warning: false
#| label: fig-detectionDates
#| fig-cap: "Streaked Horned Lark detections as a function of survey date in the Willamette Valley of Oregon, 2022 and 2023."
#| fig-cap-location: bottom
surveyData %>%
mutate(presence = ifelse(Number_Detected>0,1,0)) %>%
group_by(surveyEvent, Count_Date, surveyYear) %>%
summarise(dayOfYear = first(yday(Count_Date)), presence = first(presence)) %>%
ggplot(.,aes(x = dayOfYear, y = presence, color = presence)) + geom_point() +
facet_grid(vars(surveyYear)) +
scale_y_continuous(name = "Larks present?", breaks = c(0,1), labels = c("No","Yes")) +
theme(legend.position = "none", panel.grid.minor.y = element_blank()) +
xlab("Day of the year") + coord_fixed(ratio = 20) +
stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
#| echo: false
#| warning: false
#| label: tbl-sexAndCue
#| tbl-cap: Streaked Horned Lark detections by sex and cue during surveys in the Willamette Valley of Oregon, 2022.
tableSexAndCue <- surveyData %>%
filter(!is.na(Sex)) %>%
select(Sex, Lark_ID, Interval_1, Interval_2, Interval_3, Interval_4, surveyYear) %>%
pivot_longer(., cols = 3:6, names_to = "interval", values_to = "detection") %>%
group_by(surveyYear,Lark_ID, Sex) %>%
filter(!is.na(detection)) %>%
summarise(firstDet = first(detection)) %>%
group_by(surveyYear,Sex, firstDet) %>%
summarise(numDetected = n())
kable(as.data.frame(tableSexAndCue), col.names = c("Year", "Sex", "Detection type", "Number"), caption = "Streaked Horned Lark detections by sex and cue during surveys in the Willamette Valley of Oregon, 2022 and 2023. Note the potential data-entry errors from 2023 that may have lead to detections of singing females and singing birds of unknown-sex.")
#| echo: false
#| warning: false
#| output: false
## Create a new variable called 'distance', which translates the distance_band information into the midpoint of the distance.
## Then remove all other variables.
## THIS EXCLUDES ALL NON-SINGING MALES ##
dists <-
surveyData %>%
group_by(Site_ID) %>%
mutate(distance = ifelse(distanceBand == 1, 12.5,
ifelse(distanceBand == 2, 61,
ifelse(distanceBand == 3, 150,
ifelse(distanceBand == 4, 300, NA))))) %>%
select(Site_ID, distance, Sex, firstDet) %>%
filter(!is.na(distance), firstDet == "Singing", Sex == "Male")
## Note here that we need the "as.data.frame" argument because 'dists' is a tidyverse tibble,
## and unmarked doesn't seem to like tibbles. This forces it into a standard R data frame.
yDat <- formatDistData(distData = as.data.frame(dists), distCol = "distance", transectNameCol = "Site_ID",
dist.breaks = c(0,25,100,200,400))
## Create a new variable called 'distance', which translates the distance_band information into the midpoint of the distance.
## Then remove all other variables.
## THIS EXCLUDES ALL NON-SINGING MALES ##
dists <-
surveyData %>%
group_by(Site_ID) %>%
mutate(distance = ifelse(distanceBand == 1, 12.5,
ifelse(distanceBand == 2, 61,
ifelse(distanceBand == 3, 150,
ifelse(distanceBand == 4, 300, NA))))) %>%
select(Site_ID, distance, Sex, firstDet) %>%
filter(!is.na(distance), firstDet == "Singing", Sex == "Male")
# Review and organize data, changing formats and variable names as needed.
#surveyData <- read_xlsx("~/Documents/GitHub/hornedLarks/WV_SurveyOutput.xlsx")
surveyData <- read_csv("~/Documents/GitHub/hornedLarks/WV_SHLA_22_23.csv")
names(surveyData)[1] <- 'surveyEvent'
#surveyData$Count_Date <- mdy(surveyData$Count_Date)
surveyData$Count_Date <- mdy(surveyData$Survey_Date)
#surveyData$Start_Time <- hms(surveyData$Start_Time)
surveyData$Start_Time <- hms(surveyData$Survey_Time)
surveyData$Site_ID <- factor(surveyData$unique_ID)
surveyData$Observer <- factor(surveyData$Observer)
surveyData$Sky_Code <- factor(surveyData$Sky_Code, levels = c("0","1","2","3","4"),
labels = c("Clear","Partly cloudy","Mostly cloudy","Fog or smoke","Drizzle"))
surveyData$Sex <- factor(surveyData$Sex, levels = c("M","F","U"), labels = c("Male","Female","Unknown"))
surveyData$Age <- factor(surveyData$Age, levels = c("A", "J"), labels = c("Adult", "Juvenile"))
surveyData$`Distance Band` <- factor(surveyData$`Distance Band`)
names(surveyData)[20] <- 'distanceBand'
surveyData$Interval_1 <- ifelse(surveyData$Interval_1 == "X", NA, surveyData$Interval_1)
surveyData$Interval_2 <- ifelse(surveyData$Interval_2 == "X", NA, surveyData$Interval_2)
surveyData$Interval_3 <- ifelse(surveyData$Interval_3 == "X", NA, surveyData$Interval_3)
surveyData$Interval_4 <- ifelse(surveyData$Interval_4 == "X", NA, surveyData$Interval_4)
surveyData$Interval_1 <- factor(surveyData$Interval_1, levels = c("C","S","V"), labels =
c("Calling", "Singing", "Visual"))
surveyData$Interval_2 <- factor(surveyData$Interval_2, levels = c("C","S","V"), labels =
c("Calling", "Singing", "Visual"))
surveyData$Interval_3 <- factor(surveyData$Interval_3, levels = c("C","S","V"), labels =
c("Calling", "Singing", "Visual"))
surveyData$Interval_4 <- factor(surveyData$Interval_4, levels = c("C","S","V"), labels =
c("Calling", "Singing", "Visual"))
surveyData$dayOfYear <- yday(surveyData$Count_Date) # create a day-of-year variable for analysis
surveyData$surveyYear <- year(surveyData$Count_Date)
## Add a "first detected by..." column to survey data:
surveyData <-
surveyData %>%
filter(!is.na(Sex)) %>%
select(Sex, Lark_ID, Interval_1, Interval_2, Interval_3, Interval_4) %>%
pivot_longer(., cols = 3:6, names_to = "interval", values_to = "detection") %>%
group_by(Lark_ID, Sex) %>%
filter(!is.na(detection)) %>%
summarise(firstDet = first(detection)) %>%
right_join(., surveyData, by = 'Lark_ID', keep = F) %>%
select(!(Sex.x)) %>%
rename(Sex = Sex.y)
## Add a "first detected interval" column
surveyData <-
surveyData %>%
filter(!is.na(Sex)) %>%
select(Sex, Lark_ID, Interval_1, Interval_2, Interval_3, Interval_4) %>%
pivot_longer(., cols = 3:6, names_to = "interval", values_to = "detection") %>%
group_by(Lark_ID, Sex) %>%
filter(!is.na(detection)) %>%
summarise(firstDet = first(interval)) %>%
mutate(firstInterval = ifelse(firstDet == "Interval_1",1,
ifelse(firstDet == "Interval_2", 2,
ifelse(firstDet == "Interval_3", 3,
ifelse(firstDet == "Interval_4", 4, NA))))) %>%
right_join(., surveyData, by = 'Lark_ID', keep = F) %>%
select(!(Sex.x)) %>%
select(!firstDet.x) %>%
rename(firstDet = firstDet.y, Sex = Sex.y)
# calculate sunrise times at Corvallis Airport on each survey date.
sunriseTimes <- getSunlightTimes(date = surveyData$Count_Date, lat = 44.50, lon = -123.28,
keep = c("sunrise"), tz="America/Los_Angeles")
#create a new variable in surveyData that has sunrise matched to the survey point.
#careful, here, because there is no matching function (i.e., this only works if the
#two data frames are sorted in the same order. This should be the case unless you
#sort one after calling this function).
surveyData$sunrise <- sunriseTimes$sunrise
#subtract the two times to get decimal hours after sunrise.
surveyData$mas <- 60*((surveyData$Start_Time@hour + surveyData$Start_Time@minute/60) -
(hour(surveyData$sunrise) + minute(surveyData$sunrise)/60))
#clean up
rm(sunriseTimes)
##Write file to CSV for easier import to reporting markdown:
write_csv(surveyData, file = "/Users/johnlloyd/Documents/GitHub/hornedLarks/surveyData.csv")
#| echo: false
#| warning: false
#| output: false
## Create a new variable called 'distance', which translates the distance_band information into the midpoint of the distance.
## Then remove all other variables.
## THIS EXCLUDES ALL NON-SINGING MALES ##
dists <-
surveyData %>%
group_by(Site_ID) %>%
mutate(distance = ifelse(distanceBand == 1, 12.5,
ifelse(distanceBand == 2, 61,
ifelse(distanceBand == 3, 150,
ifelse(distanceBand == 4, 300, NA))))) %>%
select(Site_ID, distance, Sex, firstDet) %>%
filter(!is.na(distance), firstDet == "Singing", Sex == "Male")
## Note here that we need the "as.data.frame" argument because 'dists' is a tidyverse tibble,
## and unmarked doesn't seem to like tibbles. This forces it into a standard R data frame.
yDat <- formatDistData(distData = as.data.frame(dists), distCol = "distance", transectNameCol = "Site_ID",
dist.breaks = c(0,25,100,200,400))
## Create a data frame of site-level covariates.
covs <-
surveyData %>%
group_by(Site_ID) %>%
summarise(site = first(Site_ID),
observer = first(Observer),
temp = first(Temp),
avgNoise = first(Avg_Noise),
dayOfYear = first (dayOfYear),
mas = first(mas))
umf <- unmarkedFrameDS(y = as.matrix(yDat), siteCovs = as.data.frame(covs),
survey = "point", dist.breaks = c(0,25,100,200,400), unitsIn = "m")
getwd()
setwd("/Users/johnlloyd/Documents/GitHub/hornedLarks")
getwd()
dists <-
surveyData %>%
group_by(Site_ID) %>%
mutate(distance = ifelse(distanceBand == 1, 12.5,
ifelse(distanceBand == 2, 61,
ifelse(distanceBand == 3, 150,
ifelse(distanceBand == 4, 300, NA))))) %>%
select(Site_ID, distance, Sex, firstDet) %>%
filter(!is.na(distance), firstDet == "Singing", Sex == "Male")
## Note here that we need the "as.data.frame" argument because 'dists' is a tidyverse tibble,
## and unmarked doesn't seem to like tibbles. This forces it into a standard R data frame.
yDat <- formatDistData(distData = as.data.frame(dists), distCol = "distance", transectNameCol = "Site_ID",
dist.breaks = c(0,25,100,200,400))
## Create a data frame of site-level covariates.
covs <-
surveyData %>%
group_by(Site_ID) %>%
summarise(site = first(Site_ID),
observer = first(Observer),
temp = first(Temp),
avgNoise = first(Avg_Noise),
dayOfYear = first (dayOfYear),
mas = first(mas))
umf <- unmarkedFrameDS(y = as.matrix(yDat), siteCovs = as.data.frame(covs),
survey = "point", dist.breaks = c(0,25,100,200,400), unitsIn = "m")
summary(umf)
hist(umf, freq = TRUE, xlab = "Distance (m)", main = "Streaked Horned Lark detections 2022", cex.lab = 0.8, cex.axis = 0.8)
hnNull <- distsamp(~1~1, umf, keyfun = "halfnorm", output = "density", unitsOut = "kmsq")
hnNull
backTransform(hnNull, type = "state")
backTransform(hnNull, type = "det")
# calculating detection probability
sig <- exp(coef(hnNull, type="det"))
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig)$value # effective area
sqrt(ea / pi) # effective radius
# detection probability
ea / (pi*400^2)
#Half-normal, MAS
hnMAS <- distsamp(~mas ~1, umf, keyfun = "halfnorm", output = "density", unitsOut = "kmsq")
hnMAS
#Back-transformed detection probability for the average MAS
sig <- backTransform(linearComb(hnMAS['det'], c(1, mean(covs$mas))))@estimate
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig)$value # effective area
sqrt(ea / pi) # effective radius
# detection probability
ea / (pi*400^2)
# Half-normal, Day of year
hnDay <- distsamp(~dayOfYear ~1, data = umf, keyfun = "halfnorm", output = "density", unitsOut = "kmsq")
hnDay
#Back-transformed detection probability for the average day of year
sig <- backTransform(linearComb(hnDay['det'], c(1, mean(covs$dayOfYear))))@estimate
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig)$value # effective area
sqrt(ea / pi) # effective radius
# detection probability
ea / (pi*400^2)
# Half-normal, noise
hnNoise <- distsamp(~avgNoise ~1, data = umf, keyfun = "halfnorm", output = "density", unitsOut = "kmsq")
hnNoise
#Back-transformed detection probability for the average day of year
sig <- backTransform(linearComb(hnNoise['det'], c(1, mean(covs$avgNoise))))@estimate
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig)$value # effective area
sqrt(ea / pi) # effective radius
# detection probability
ea / (pi*400^2)
# Half-normal, Temp
hnTemp <- distsamp(~temp ~1, data = umf, keyfun = "halfnorm", output = "density", unitsOut = "kmsq")
hnTemp
#Back-transformed detection probability for the average day of year
sig <- backTransform(linearComb(hnTemp['det'], c(1, mean(covs$temp))))@estimate
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig)$value # effective area
sqrt(ea / pi) # effective radius
# detection probability
ea / (pi*400^2)
# Hazard-rate models
haNull <- distsamp(~1 ~1, data = umf, keyfun = "hazard", output = "density", unitsOut = "kmsq")
haNoise <- distsamp(~avgNoise ~1, data = umf, keyfun = "hazard", output = "density", unitsOut = "kmsq")
haTemp <- distsamp(~temp ~1, data = umf, keyfun = "hazard", output = "density", unitsOut = "kmsq")
haDay <- distsamp(~dayOfYear ~1, data = umf, keyfun = "hazard", output = "density", unitsOut = "kmsq")
haMAS <- distsamp(~mas ~1, data = umf, keyfun = "hazard", output = "density", unitsOut = "kmsq")
fmList <- list("haNull" = haNull, "haDay" = haDay, "haNoise" = haNoise, "haMAS" = haMAS, "haTemp" = haTemp,
"hnNull" = hnNull, "hnDay" = hnDay, "hnNoise" = hnNoise, "hnMAS" = hnMAS, "hnTemp" = hnTemp)
tableDistanceAIC <- aictab(cand.set = fmList, second.ord = T, sort = T)
View(tableDistanceAIC)
backTransform(hnNull, type = "det")
sig <- exp(coef(hnNull, type="det"))
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig)$value # effective area
sqrt(ea / pi) # effective radius
# detection probability
ea / (pi*400^2)
fitstats <- function(hnNull) {
observed <- getY(hnNull@data)
expected <- fitted(hnNull)
resids <- residuals(hnNull)
sse <- sum(resids^2)
chisq <- sum((observed - expected)^2 / expected)
freeTuke <- sum((sqrt(observed) - sqrt(expected))^2)
out <- c(SSE=sse, Chisq=chisq, freemanTukey=freeTuke)
return(out)
}
(pb <- parboot(hnNull, fitstats, nsim=25, report=1))
getP <- function(hnNull) {
sig <- exp(coef(hnNull, type="det"))
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) # detection probability
out <- c(p = p, er = er)
return(out)
}
parboot(hnNull, getP, nsim = 25, report = 1)
## Estimating density with a parametric bootstrap
getD <- function(hnNull) {
d <- backTransform(hnNull, type = "state")@estimate
return(d)
}
parboot(hnDay, getD, nsim = 25, report = 1)
backTransform(hnNull, type = "state")
