return(p)
}
getPdistrem()
backTransform(drDay, type = "removal")
backTransform(drDay, type = "rem")
## Function to calculate the prob. of detection,
## where p = detection prob. from distance sampling,
## and d = detection prob. from removal sampling,
## and P*D = overall detectability.
## I think due to the uncertainty and very small estimates for each part of the equation,
## the bootstrap function is failing. Not sure how to get to a CI around P.
getPdistrem <- function(x) {
d <- backTransform(x@estimates@estimates$rem)@estimate
sig <- backTransform(x@estimates@estimates$dist)@estimate
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
Pd <- p*d
return(Pd)
}
getPdistrem(drNull)
## Function to calculate the prob. of detection,
## where p = detection prob. from distance sampling,
## and d = detection prob. from removal sampling,
## and P*D = overall detectability.
## I think due to the uncertainty and very small estimates for each part of the equation,
## the bootstrap function is failing. Not sure how to get to a CI around P.
getPdistrem <- function(x) {
d <- backTransform(x@estimates@estimates$rem)@estimate
sig <- backTransform(x@estimates@estimates$dist)@estimate
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
Pd <- p*d
return(Pd)
return(d)
}
getPdistrem(drNull)
## Function to calculate the prob. of detection,
## where p = detection prob. from distance sampling,
## and d = detection prob. from removal sampling,
## and P*D = overall detectability.
## I think due to the uncertainty and very small estimates for each part of the equation,
## the bootstrap function is failing. Not sure how to get to a CI around P.
getPdistrem <- function(x) {
d <- backTransform(x@estimates@estimates$rem)@estimate
sig <- backTransform(x@estimates@estimates$dist)@estimate
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
Pd <- p*d
return(d)
}
getPdistrem(drNull)
0.22*0.06
## Function to calculate the prob. of detection,
## where p = detection prob. from distance sampling,
## and d = detection prob. from removal sampling,
## and P*D = overall detectability.
## I think due to the uncertainty and very small estimates for each part of the equation,
## the bootstrap function is failing. Not sure how to get to a CI around P.
getPdistrem <- function(x) {
d <- backTransform(x@estimates@estimates$rem)@estimate
sig <- backTransform(x@estimates@estimates$dist)@estimate
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
Pd <- p*d
return(Pd)
}
getPdistrem(drNull)
drBest <- gdistremoval(lambdaformula = ~1, phiformula = ~1, removalformula = ~dayOfYear,
distanceformula = ~dayOfYear, data = umfDR, keyfun = "halfnorm",
output = "density", unitsOut = "kmsq", mixture = "ZIP")
summary(drBest)
300.05-298.04
301.54-298.04
302.29-298.04
## No AICTAB function for dealing with gdistremoval, so this doesn't work:
fmList <- list("drNull" = drNull, "drDay" = drDay, "drNoise" = drNoise, "drMAS" = drMAS, "drTemp" = drTemp)
ms <- modSel(fmList)
## No AICTAB function for dealing with gdistremoval, so this doesn't work:
fmList <- fitList("drNull" = drNull, "drDay" = drDay, "drNoise" = drNoise, "drMAS" = drMAS, "drTemp" = drTemp)
## No AICTAB function for dealing with gdistremoval, so this doesn't work:
fmList <- fitList(Null = drNull, Day = drDay, Noise = drNoise, Time-of-day = drMAS, temp = drTemp)
## No AICTAB function for dealing with gdistremoval, so this doesn't work:
fmList <- fitList(Null=drNull, Day=drDay, Noise=drNoise, Time-of-day=drMAS, temp=drTemp)
## No AICTAB function for dealing with gdistremoval, so this doesn't work:
fmList <- fitList(Null=drNull, Day=drDay, Noise=drNoise, Time=drMAS, temp=drTemp)
drBest
drDay
## Distance removal with day-of-year as covariate on distance:
drDay <- gdistremoval(lambdaformula = ~1, phiformula = ~1, removalformula = ~1,
distanceformula = ~dayOfYear, data = umfDR, keyfun = "halfnorm",
output = "density", unitsOut = "kmsq", mixture = "ZIP")
summary(drDay)
summary drBest
summary (drBest)
summary(drNull)
drMAS <- gdistremoval(lambdaformula = ~1, phiformula = ~1, removalformula = ~mas,
distanceformula = ~dayOfYear, data = umfDR, keyfun = "halfnorm",
output = "density", unitsOut = "kmsq", mixture = "ZIP")
summary(drMAS)
drNoise <- gdistremoval(lambdaformula = ~1, phiformula = ~1, removalformula = ~avgNoise,
distanceformula = ~dayOfYear, data = umfDR, keyfun = "halfnorm",
output = "density", unitsOut = "kmsq", mixture = "ZIP")
summary(drNoise)
drTemp <- gdistremoval(lambdaformula = ~1, phiformula = ~1, removalformula = ~temp,
distanceformula = ~dayOfYear, data = umfDR, keyfun = "halfnorm",
output = "density", unitsOut = "kmsq", mixture = "ZIP")
summary(drTemp)
drDayRemOnly <- gdistremoval(lambdaformula = ~1, phiformula = ~1, removalformula = ~dayOfYear,
distanceformula = ~1, data = umfDR, keyfun = "halfnorm",
output = "density", unitsOut = "kmsq", mixture = "ZIP")
summary(drDayRemOnly)
drMASRemOnly <- gdistremoval(lambdaformula = ~1, phiformula = ~1, removalformula = ~MAS,
distanceformula = ~1, data = umfDR, keyfun = "halfnorm",
output = "density", unitsOut = "kmsq", mixture = "ZIP")
drMASRemOnly <- gdistremoval(lambdaformula = ~1, phiformula = ~1, removalformula = ~mas,
distanceformula = ~1, data = umfDR, keyfun = "halfnorm",
output = "density", unitsOut = "kmsq", mixture = "ZIP")
summary(drMASRemOnly)
summary(drNull)
low <- 296.45
297.98 - low
298.04 - low
298.44-low
298.66-low
298.72-low
300.09-low
getPdistrem()
getPdistrem <- function(x) {
sig <- backTransform(linearComb(drDay,c(1,171), type = "dist"))
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig@estimate)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
return(p)
}
getPdistrem()
parboot(drNull, getPdistrem, nsim = 25, report = 1)
backTransform(drDay, type = "distance")
backTransform(drDay, type = "dist")
backTransform(drDay, type = "rem")
backTransform(linearComb(drDay,c(1,171), type = "dist"))
median(covs$dayOfYear)
# Get p
getPdistrem <- function(x) {
sig <- backTransform(linearComb(drDay,c(1,150), type = "dist"))
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig@estimate)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
return(p)
}
getPdistrem()
parboot(drNull, getPdistrem, nsim = 25, report = 1)
backTransform(drDay, type = "rem")
## Function to calculate the prob. of detection,
## where p = detection prob. from distance sampling,
## and d = detection prob. from removal sampling,
## and P*D = overall detectability.
## I think due to the uncertainty and very small estimates for each part of the equation,
## the bootstrap function is failing. Not sure how to get to a CI around P.
getPhatDistRem <- function(x) {
d <- backTransform(x@estimates@estimates$rem)@estimate
sig <- backTransform(x@estimates@estimates$dist)@estimate
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
Pd <- p*d
return(Pd)
}
getPhatDistRem(drDay)
getPD <- function(x) {
d <- backTransform(linearComb(drDay,c(1,0), type = "rem"))
sig <- backTransform(linearComb(drDay,c(1,0), type = "dist"))
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig@estimate)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
Pd <- p*(d@estimate)
return(Pd)
}
getPD(drDay)
getPD <- function(x) {
d <- backTransform(drDay, type = "rem"))
getPD <- function(x) {
d <- backTransform(drDay, type = "rem")
sig <- backTransform(linearComb(drDay,c(1,0), type = "dist"))
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig@estimate)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
Pd <- p*(d@estimate)
return(Pd)
}
getPD(drDay)
return(P)
getPD <- function(x) {
d <- backTransform(drDay, type = "rem")
sig <- backTransform(linearComb(drDay,c(1,0), type = "dist"))
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig@estimate)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
Pd <- p*(d@estimate)
return(P)
}
getPD <- function(x) {
d <- backTransform(drDay, type = "rem")
sig <- backTransform(linearComb(drDay,c(1,0), type = "dist"))
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig@estimate)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
Pd <- p*(d@estimate)
return(p)
}
getPD(drDay)
backTransform(drDay, type = "rem")
backTransform(linearComb(drDay,c(1,0), type = "dist"))
backTransform(linearComb(drDay,c(1,171), type = "dist"))
getPD <- function(x) {
d <- backTransform(drDay, type = "rem")
sig <- backTransform(linearComb(drDay,c(1,171), type = "dist"))
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig@estimate)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
Pd <- p*(d@estimate)
return(p)
}
getPD(drDay)
parboot(drDay, getPD, nsim = 25, report = 25)
getPD <- function(x) {
d <- backTransform(drDay, type = "rem")
sig <- backTransform(linearComb(drDay,c(1,171), type = "dist"))
ea <- 2*pi * integrate(grhn, 0, 400, sigma=sig@estimate)$value # effective area
er <- sqrt(ea / pi) # effective radius
p <- ea / (pi*400^2) #detection probability
Pd <- p*(d@estimate)
return(Pd)
}
getPD(drDay)
backTransform(drDay, type = "state")
backTransform(drDay, type = "lambda")
summary(drDay)
library(tidyverse)
library(readxl)
library(lubridate)
library(suncalc)
library(ggpmisc)
library(unmarked)
library(AICcmodavg)
library(ubms)
# Review and organize data, changing formats and variable names as needed.
#surveyData <- read_xlsx("~/Documents/GitHub/hornedLarks/WV_SurveyOutput.xlsx")
surveyData <- read_csv("~/Documents/GitHub/hornedLarks/WV_SHLA_22.csv")
names(surveyData)[1] <- 'surveyEvent'
#surveyData$Count_Date <- mdy(surveyData$Count_Date)
surveyData$Count_Date <- mdy(surveyData$Survey_Date)
#surveyData$Start_Time <- hms(surveyData$Start_Time)
surveyData$Start_Time <- hms(surveyData$Survey_Time)
surveyData$Site_ID <- factor(surveyData$Site_ID)
surveyData$Observer <- factor(surveyData$Observer)
surveyData$Sky_Code <- factor(surveyData$Sky_Code, levels = c("0","1","2","3","4"),
labels = c("Clear","Partly cloudy","Mostly cloudy","Fog or smoke","Drizzle"))
surveyData$Sex <- factor(surveyData$Sex, levels = c("M","F","U"), labels = c("Male","Female","Unknown"))
surveyData$Age <- factor(surveyData$Age, levels = c("A", "J"), labels = c("Adult", "Juvenile"))
surveyData$`Distance Band` <- factor(surveyData$`Distance Band`)
names(surveyData)[19] <- 'distanceBand'
surveyData$Interval_1 <- ifelse(surveyData$Interval_1 == "X", NA, surveyData$Interval_1)
surveyData$Interval_2 <- ifelse(surveyData$Interval_2 == "X", NA, surveyData$Interval_2)
surveyData$Interval_3 <- ifelse(surveyData$Interval_3 == "X", NA, surveyData$Interval_3)
surveyData$Interval_4 <- ifelse(surveyData$Interval_4 == "X", NA, surveyData$Interval_4)
surveyData$Interval_1 <- factor(surveyData$Interval_1, levels = c("C","S","V"), labels =
c("Calling", "Singing", "Visual"))
surveyData$Interval_2 <- factor(surveyData$Interval_2, levels = c("C","S","V"), labels =
c("Calling", "Singing", "Visual"))
surveyData$Interval_3 <- factor(surveyData$Interval_3, levels = c("C","S","V"), labels =
c("Calling", "Singing", "Visual"))
surveyData$Interval_4 <- factor(surveyData$Interval_4, levels = c("C","S","V"), labels =
c("Calling", "Singing", "Visual"))
surveyData$dayOfYear <- yday(surveyData$Count_Date) # create a day-of-year variable for analysis
## Add a "first detected by..." column to survey data:
surveyData <-
surveyData %>%
filter(!is.na(Sex)) %>%
select(Sex, Lark_ID, Interval_1, Interval_2, Interval_3, Interval_4) %>%
pivot_longer(., cols = 3:6, names_to = "interval", values_to = "detection") %>%
group_by(Lark_ID, Sex) %>%
filter(!is.na(detection)) %>%
summarise(firstDet = first(detection)) %>%
right_join(., surveyData, by = 'Lark_ID', keep = F) %>%
select(!(Sex.x)) %>%
rename(Sex = Sex.y)
## Add a "first detected interval" column
surveyData <-
surveyData %>%
filter(!is.na(Sex)) %>%
select(Sex, Lark_ID, Interval_1, Interval_2, Interval_3, Interval_4) %>%
pivot_longer(., cols = 3:6, names_to = "interval", values_to = "detection") %>%
group_by(Lark_ID, Sex) %>%
filter(!is.na(detection)) %>%
summarise(firstDet = first(interval)) %>%
mutate(firstInterval = ifelse(firstDet == "Interval_1",1,
ifelse(firstDet == "Interval_2", 2,
ifelse(firstDet == "Interval_3", 3,
ifelse(firstDet == "Interval_4", 4, NA))))) %>%
right_join(., surveyData, by = 'Lark_ID', keep = F) %>%
select(!(Sex.x)) %>%
select(!firstDet.x) %>%
rename(firstDet = firstDet.y, Sex = Sex.y)
# Get sunrise times to look at effect of survey timing in detections,
# here using the Corvallis airport as the location. We could calculate
# sunrise based on the lat/long of each survey point, but they are
# all going to have roughly the same sunrise so for ease I'm simply estimating
# sunrise at a single, central location.
# calculate sunrise times at Corvallis Airport on each survey date.
sunriseTimes <- getSunlightTimes(date = surveyData$Count_Date, lat = 44.50, lon = -123.28,
keep = c("sunrise"), tz="America/Los_Angeles")
#create a new variable in surveyData that has sunrise matched to the survey point.
#careful, here, because there is no matching function (i.e., this only works if the
#two data frames are sorted in the same order. This should be the case unless you
#sort one after calling this function).
surveyData$sunrise <- sunriseTimes$sunrise
#subtract the two times to get decimal hours after sunrise.
surveyData$mas <- 60*((surveyData$Start_Time@hour + surveyData$Start_Time@minute/60) -
(hour(surveyData$sunrise) + minute(surveyData$sunrise)/60))
#clean up
rm(sunriseTimes)
# Read in survey location and habitat data
habitatData <- read_csv("tbl_survey_locations_exported_09_26_2022_pct_suitable_2021.csv")
habitatData$Site_ID <- factor(habitatData$Site_ID)
habitatAndSurveyData <-
habitatData %>%
select(Site_ID,ln_UTM1083,lt_UTM1083,ln_WGS84,lt_WGS84, pct_suitable_2021) %>%
right_join(.,surveyData, by = 'Site_ID', keep = F)
habitatAndSurveyData$Site_ID <- factor(habitatAndSurveyData$Site_ID)
habitatAndSurveyData$Observer <- factor(habitatAndSurveyData$Observer)
# Make encounter histories for detected birds across intervals
surveyData$encounterHistory <- paste(if_else(surveyData$Interval_1 == "None", 0,1),
if_else(surveyData$Interval_2 == "None", 0,1),
if_else(surveyData$Interval_3 == "None", 0,1),
if_else(surveyData$Interval_4 == "None", 0,1),
sep = "")
# Calculate the incidence of encounters:
surveyData %>%
group_by(Site_ID) %>%
summarise(larksDetected = first(Number_Detected)) %>%
group_by(larksDetected) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
View(surveyData)
# Singing males only:
surveyData %>%
filter(firstDet == "Singing")
# Singing males only:
surveyData %>%
filter(firstDet == "Singing") %>%
group_by(Site_ID) %>%
summarise(larksDetected = first(Number_Detected)) %>%
group_by(larksDetected) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
# Singing males only:
surveyData %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(firstDet == "Singing", first(Number_Detected), 0)) %>%
group_by(larksDetected) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
# Singing males only:
surveyData %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(firstDet != "Singing", 0, first(Number_Detected))) %>%
group_by(larksDetected) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
# Singing males only:
surveyData %>%
group_by(Site_ID) %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
summarise(larksDetected = ifelse(singMale = 1, first(Number_Detected), 0)) %>%
group_by(larksDetected) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
# Singing males only:
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(singMale = 1, first(Number_Detected), 0)) %>%
group_by(larksDetected) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
# Singing males only:
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(singMale == 1, first(Number_Detected), 0)) %>%
group_by(larksDetected) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
surveyData %>%
group_by(Site_ID) %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0))
surveyData %>%
group_by(Site_ID) %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
summarise(larksDetected = ifelse(singMale == 1, first(Number_Detected), 0))
surveyData %>%
group_by(Site_ID) %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
summarise(larksDetected = ifelse(singMale = 1, 1, 0))
surveyData %>%
group_by(Site_ID) %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
summarise(larksDetected = ifelse(singMale == 1, 1, 0))
surveyData %>%
group_by(Site_ID) %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
summarise(larksDetected = singMale)
# Singing males only:
surveyData %>%
group_by(Site_ID) %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
group_by(singMale) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
surveyData %>%
group_by(Site_ID) %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0))
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(singMale = 1, first(Number_Detected), 0))
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(singMale == 1, first(Number_Detected), 0))
# Singing males only:
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(singMale == 1, first(Number_Detected), 0)) %>%
larksDetected[is.na(larksDetected)] <- 0 %>%
group_by(larksDetected) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(singMale == 1, first(Number_Detected), 0)) %>%
larksDetected[is.na(larksDetected)] <- 0
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(singMale == 1, first(Number_Detected), 0)) %>%
larksDetected[is.na(larksDetected)] <- 0
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(singMale == 1, first(Number_Detected), 0)) %>%
larksDetected[is.na(larksDetected)] <- 0 %>%
group_by(larksDetected)
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(singMale == 1, first(Number_Detected), 0))
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0))
print(n = 214)
checky <-
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0))
View(checky)
checky <-
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
mutate(singMale = ifelse(is.na(singMale), 0, singMale))
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
mutate(singMale = ifelse(is.na(singMale), 0, singMale)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(singMale == 1, first(Number_Detected), 0))
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
mutate(singMale = ifelse(is.na(singMale), 0, singMale)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = ifelse(singMale == 1, first(Number_Detected), 0)) %>%
group_by(larksDetected) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
# Singing males only:
rm(checky)
# Calculate the incidence of encounters:
surveyData %>%
group_by(Site_ID) %>%
summarise(larksDetected = first(Number_Detected)) %>%
group_by(larksDetected) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
mutate(singMale = ifelse(is.na(singMale), 0, singMale)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = max(singMale)) %>%
group_by(larksDetected) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
surveyData %>%
mutate(singMale = ifelse(firstDet == "Singing", 1, 0)) %>%
mutate(singMale = ifelse(is.na(singMale), 0, singMale)) %>%
group_by(Site_ID) %>%
summarise(larksDetected = sum(singMale)) %>%
group_by(larksDetected) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count))
